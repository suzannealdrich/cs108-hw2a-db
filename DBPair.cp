// DBPair.cp#include "DBPair.h"#include <string.h>#include <assert.h>static char* CopyString(const char* oldStr) {	int n = strlen(oldStr) + 1;	char* newStr = new char[n];	assert(newStr != NULL);	strcpy(newStr, oldStr);	return newStr;}static void FreeString(char* str) {	if (str != NULL) delete [] str;}DBPair::DBPair() {	attribute = value = NULL;}DBPair::DBPair(const char* _attribute, const char* _value) {	SetAttributeValue(_attribute, _value);}DBPair::~DBPair() {	ClearAttributeValue();}void DBPair::SetAttributeValue(const char* _attribute, const char* _value) {	ClearAttributeValue();	attribute = CopyString(_attribute);	value = CopyString(_value);}bool DBPair::Contains(const DBPair& criteria) const {	if (criteria.attribute == NULL || attribute == NULL) return false;	if (strcmp(criteria.attribute, "*") != 0 	&&  strcmp(criteria.attribute, attribute) != 0) return false;	return (strcmp(criteria.value, "*") == 0 || strstr(value, criteria.value) != NULL);}void DBPair::Read(istream& in) {	char localAttribute[MAX_STRING_LEN];	char localValue[MAX_STRING_LEN];		in >> localAttribute;					// read the attribute string	in.ignore(1);							// ditch the 1 delim char	in.getline(localValue, MAX_STRING_LEN);	// the rest of the line is the value		SetAttributeValue(localAttribute, localValue);}void DBPair::Write(ostream& out) const {	if (attribute == NULL) return;		out << attribute;	out << ' ';	out << value;	out << endl;}void DBPair::ClearAttributeValue() {	FreeString(attribute);	FreeString(value);	attribute = value = NULL;}